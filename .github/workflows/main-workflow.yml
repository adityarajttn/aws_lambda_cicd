name: AWS Lambda CICD

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

  workflow_dispatch:
    inputs:
      reason:
        type: choice
        description: Choose AWS Reason
        options:
        - us-east-1
        - ap-south-1

      image_tag:
        type: choice
        description: Choose Docker Image Tag
        options:
        - latest
        - v1
        - v2

      repository_name:
        description: 'ECR repository name'
        required: false
        default: "aws_lambda_cicd"

jobs:
  create_ecr:
    name: Create ECR
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.reason }}

      - name: Create repository 
        run: aws ecr create-repository --repository-name ${{ github.event.inputs.repository_name }}
        continue-on-error: true

  # echo:
  #   name: echo
  #   needs: [create_ecr]
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.inputs.image_version == 'latest' }}
  #   steps:
  #     - name: echo
  #       run: echo "Hello World"

  build_docker_image:
    name: Build Docker Images
    needs: [create_ecr]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.reason }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.inputs.repository_name }}
          IMAGE_TAG: latest
        run: |
          export LATEST_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:latest
          export V1_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:v1
          export V2_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:v2
          docker pull $LATEST_IMAGE
          docker pull $V1_IMAGE
          docker pull $V2_IMAGE
          docker tag $V1_IMAGE $V2_IMAGE
          docker tag $LATEST_IMAGE $V1_IMAGE
          docker build --file app/Dockerfile -t $LATEST_IMAGE .
          docker push $LATEST_IMAGE
          docker push $V1_IMAGE
          docker push $V2_IMAGE

  terraform:
    name: "Update Lambda function"
    needs: [build_docker_image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.reason }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10

      - name: Terraform Init
        id: init
        run: |
          echo -e "repository_name = \"${REPOSITORY_NAME}\"\n" >> terraform.auto.tfvars
          echo -e "\nimage_tag = \"${IMAGE_TAG}\"\n" >> terraform.auto.tfvars
          cat terraform.auto.tfvars
          terraform init
        env:
          REPOSITORY_NAME: ${{ github.event.inputs.repository_name }}
          IMAGE_TAG: ${{ github.event.inputs.image_version }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve

        
